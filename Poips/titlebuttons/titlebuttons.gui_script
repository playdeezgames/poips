local MUTE_BUTTON = "mutebutton"
local STATS_BUTTON = "statsbutton"
local INFO_BUTTON = "infobutton"
local HELP_BUTTON = "helpbutton"

function init(self)
	msg.post(".", "acquire_input_focus")
end

local hoverButton = nil

function update(self, dt)
	if hoverButton==MUTE_BUTTON then
		if sound.get_group_gain("master")>0 then
			gui.play_flipbook(gui.get_node(MUTE_BUTTON), "SpeakerOffHover")
		else
			gui.play_flipbook(gui.get_node(MUTE_BUTTON), "SpeakerOnHover")
		end
	else
		if sound.get_group_gain("master")>0 then
			gui.play_flipbook(gui.get_node(MUTE_BUTTON), "SpeakerOff")
		else
			gui.play_flipbook(gui.get_node(MUTE_BUTTON), "SpeakerOn")
		end
	end
	if hoverButton==STATS_BUTTON then
		gui.play_flipbook(gui.get_node(STATS_BUTTON), "StatsHover")
	else
		gui.play_flipbook(gui.get_node(STATS_BUTTON), "Stats")
	end
	if hoverButton==INFO_BUTTON then
		gui.play_flipbook(gui.get_node(INFO_BUTTON), "InfoHover")
	else
		gui.play_flipbook(gui.get_node(INFO_BUTTON), "Info")
	end
	if hoverButton==HELP_BUTTON then
		gui.play_flipbook(gui.get_node(HELP_BUTTON), "HelpHover")
	else
		gui.play_flipbook(gui.get_node(HELP_BUTTON), "Help")
	end
end

function updateHoverButton(x,y)
	if gui.pick_node(gui.get_node(MUTE_BUTTON), x, y) then
		hoverButton=MUTE_BUTTON
	elseif gui.pick_node(gui.get_node(STATS_BUTTON), x, y) then
		hoverButton=STATS_BUTTON
	elseif gui.pick_node(gui.get_node(INFO_BUTTON), x, y) then
		hoverButton=INFO_BUTTON
	elseif gui.pick_node(gui.get_node(HELP_BUTTON), x, y) then
		hoverButton=HELP_BUTTON
	else
		hoverButton = nil
	end
end

function on_input(self, action_id, action)
	if action_id==nil then
		updateHoverButton(action.x,action.y)
	elseif action_id==hash("previous") and action.pressed then
		if hoverButton==HELP_BUTTON then
		elseif hoverButton==INFO_BUTTON then
		elseif hoverButton==STATS_BUTTON then
		elseif hoverButton==MUTE_BUTTON then
			msg.post("/board", "toggleMute")
		else
			msg.post(".","release_input_focus")
			msg.post(".", "disable")
			msg.post("/board", "resetBoard")
			msg.post("/board", "acquire_input_focus")
		end
	end
end

function on_message(self, message_id, message, sender)
end


